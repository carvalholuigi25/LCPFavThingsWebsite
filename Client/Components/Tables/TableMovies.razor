@using LCPFavThingsWebsite.Shared.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JS

@if (MoviesList != null)
{
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Rating</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tsx in MoviesList)
                {
                    <tr>
                        <td>@tsx.MovieId</td>
                        <td>@tsx.Title</td>
                        <td>@tsx.Rating</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p class="mt-3">No data for table Movies!</p>
}

@code {
    private HubConnection? hubConnection;
    private List<Movies>? MoviesList { get; set; } = new List<Movies>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/broadcasthub"))
                .Build();

            hubConnection.On("ReceiveMessage", async () =>
            {
                await LoadData();
            });

            await hubConnection.StartAsync();
            await LoadData();
        }
        catch (Exception e)
        {
            await JS.InvokeVoidAsync("alert", e.Message);
        }
    }

    protected async Task LoadData()
    {
        MoviesList = await Http.GetFromJsonAsync<List<Movies>>("/api/movies");
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
