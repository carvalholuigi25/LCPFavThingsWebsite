@* source: https://github.com/meziantou/Meziantou.Framework/blob/ee664b6cf25ab0ae70ceaee55fcd3ef77c30dc4d/src/Meziantou.AspNetCore.Components/GenericForm.razor *@
@* file GenericForm.razor *@
@typeparam TModel

@if (fields != null)
{
    foreach (var field in fields)
    {
        if (FieldTemplate != null)
        {
            @FieldTemplate(field)
        }
        else
        {
            <div class="mt-3">
                <label for="@field.EditorId">@field.DisplayName</label>
                @field.EditorTemplate
                @field.FieldValidationTemplate
            </div>
        }
    }
}

@code {
    internal string BaseEditorId { get; } = Guid.NewGuid().ToString();
    private List<GenericFormField<TModel>>? fields;

    [Parameter]
    public TModel? Model { get; set; }

    [Parameter]
    public EventCallback<TModel> ModelChanged { get; set; }

    [Parameter]
    public bool EnableFieldValidation { get; set; } = true;

    [Parameter]
    public string? EditorClass { get; set; }

    [Parameter]
    public RenderFragment<GenericFormField<TModel>>? FieldTemplate { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (fields != null)
        {
            foreach (var field in fields)
            {
                field.ValueChanged -= OnValueChanged;
            }
        }

        if (Model != null)
        {
            fields = GenericFormField<TModel>.Create(this);
            foreach (var field in fields)
            {
                field.ValueChanged += OnValueChanged;
            }
        }
        else
        {
            fields = null;
        }
    }

    private void OnValueChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() => ModelChanged.InvokeAsync(Model));
    }
}